"0","quiet <- function(x) {"
"0","  sink(tempfile())"
"0","  on.exit(sink())"
"0","  invisible(force(x))"
"0","}"
"0",""
"0","# difference in means"
"0","diff <- function(data, Y, treat) {"
"0","  fml <- as.formula(paste(Y, ""~"", treat))"
"0","  out <- summary(lm_robust(fml, data = data, se_type = ""stata""))$coefficients[treat, c(1, 2, 5, 6)]"
"0","  return(out) # extract coef, se, ci.lower, ci.upper"
"0","}"
"0",""
"0",""
"0","# regression adjustment"
"0","reg <- function(data, Y, treat, covar) {"
"0","  fml <- as.formula(paste(Y, ""~"", treat, ""+"", paste(covar, collapse = "" + "")))"
"0","  out <- summary(lm_robust(fml, data = data, se_type = ""stata""))$coefficients[treat, c(1, 2, 5, 6)]"
"0","  # extract coef, se, ci.lower, ci.upper"
"0","  return(out)"
"0","}"
"0",""
"0","# matching"
"0","#library(Matching)"
"0","matching <- function(data, Y, treat, covar) {"
"0","  m.out <- Match(Y = data[, Y], Tr = data[, treat], X = data[, covar], Z = data[, covar],"
"0","                 estimand = ""ATT"", M = 5, replace = TRUE, ties = TRUE, BiasAdjust = TRUE)"
"0","  out <- c(m.out$est[1], m.out$se[1], m.out$est[1] - 1.96 * m.out$se[1],"
"0","           m.out$est[1] + 1.96 * m.out$se[1])"
"0","  return(out)"
"0","}"
"0",""
"0","psm <- function(data, Y, treat, covar) {"
"0","  ps <- probability_forest(X = data[, covar],"
"0","                           Y = as.factor(data[,treat]), seed = 1234, num.trees = 4000)$predictions[,2]"
"0","  m.out <- Match(Y = data[, Y], Tr = data[, treat], X = matrix(ps, nrow(data), 1),"
"0","                 estimand = ""ATT"", M = 1, replace = FALSE, ties = FALSE, BiasAdjust = FALSE)"
"0","  if (is.null(m.out$se)==FALSE) {"
"0","    se <- m.out$se[1]"
"0","  } else {"
"0","    se <- m.out$se.standard[1]"
"0","  }"
"0","  out <- c(m.out$est[1], se, m.out$est[1] - 1.96 * se,"
"0","           m.out$est[1] + 1.96 * se)"
"0","  return(out)"
"0","}"
"0",""
"0",""
"0","# OM (reg)"
"0","om.reg <- function(data, Y, treat, covar) {"
"0","  tr <- which(data[, treat] == 1)"
"0","  co <- which(data[, treat] == 0)"
"0","  fml <- as.formula(paste(Y, ""~"", paste(covar, collapse = "" + "")))"
"0","  out.co <- lm(fml, data = data[co, ])"
"0","  Y.tr.hat <- predict(out.co, newdata = data[tr, covar, drop = FALSE])"
"0","  newdata <- cbind.data.frame(Y = c(data[tr, Y], Y.tr.hat), treat = rep(c(1, 0), each = length(tr)))"
"0","  out <- summary(lm_robust(Y ~ treat, data = newdata, se_type = ""stata""))$coefficients[""treat"", c(1, 2, 5, 6)]"
"0","  return(out)"
"0","}"
"0",""
"0","# OM (grf)"
"0","#library(grf)"
"0","om.grf <- function(data, Y, treat, covar) {"
"0","  tr <- which(data[, treat] == 1)"
"0","  co <- which(data[, treat] == 0)"
"0","  out.co <- regression_forest(X = data[co, covar, drop = FALSE], Y = as.vector(data[co, Y]) )"
"0","  Y.tr.hat <- as.vector(unlist(predict(out.co, newdata = data[tr, covar, drop = FALSE])))"
"0","  newdata <- cbind.data.frame(Y = c(data[tr, Y], Y.tr.hat), treat = rep(c(1, 0), each = length(tr)))"
"0","  out <- summary(lm_robust(Y ~ treat, data = newdata, se_type = ""stata""))$coefficients[""treat"", c(1, 2, 5, 6)]"
"0","  return(out)"
"0","}"
"0",""
"0",""
"0","# IPW"
"0","ipw <- function(data, Y, treat, covar) {"
"0","  ps <- probability_forest(X = data[, covar, drop = FALSE], Y = as.factor(data[, treat]), seed = 1234)$predictions[,2]"
"0","  fml <- as.formula(paste(Y, ""~"", treat))"
"0","  weights <- rep(1, nrow(data))"
"0","  co <- which(data[, treat] == 0)"
"0","  weights[co] <- ps[co]/(1-ps[co])"
"0","  out <- summary(lm_robust(fml, data = data, weights = weights, se_type = ""stata""))$coefficients[treat, c(1, 2, 5, 6)]"
"0","  # extract coef, se, ci.lower, ci.upper"
"0","  return(out)"
"0","}"
"0",""
"0","# CBPS"
"0","#library(""CBPS"")"
"0","cbps <- function(data, Y, treat, covar) {"
"0","  fml <- as.formula(paste(treat, ""~"", paste(covar, collapse = "" + "")))"
"0","  ps <- quiet(CBPS(fml, data = data, standardize = TRUE)$fitted.values)"
"0","  fml <- as.formula(paste(Y, ""~"", treat))"
"0","  weights <- rep(1, nrow(data))"
"0","  co <- which(data[, treat] == 0)"
"0","  weights[co] <- ps[co]/(1-ps[co])"
"0","  out <- summary(lm_robust(fml, data = data, weights = weights, se_type = ""stata""))$coefficients[treat, c(1, 2, 5, 6)]"
"0","  return(out)"
"0","}"
"0",""
"0","# ebal"
"0","#library(hbal)"
"0","ebal <- function(data, Y, treat, covar) {"
"0","  ebal.out <- hbal::hbal(Y = Y, Treat = treat, X = covar,  data = data, expand.degree = 1)"
"0","  out <- hbal::att(ebal.out, dr = FALSE)[1, c(1, 2, 5, 6)]"
"0","  return(out)"
"0","}"
"0",""
"0","# hbal"
"0","# hbal <- function(data, Y, treat, covar) {"
"0","#   hbal.out <- hbal::hbal(Y = Y, Treat = treat, X = covar,  data = data, expand.degree = 2, # cv = TRUE)"
"0","#   out <- hbal::att(hbal.out, dr = FALSE)[1, c(1, 2, 5, 6)]"
"0","#   return(out)"
"0","# }"
"0",""
"0",""
"0","# AIPW"
"0","aipw <- function(data, Y, treat, covar) {"
"0","  #library(""grf"")"
"0","  for (var in c(Y, treat, covar)) {"
"0","    data[, var] <- as.vector(data[, var])"
"0","  }"
"0","  c.forest <- causal_forest(X = data[, covar, drop = FALSE], Y = data[, Y],"
"0","                            W = data[, treat], seed = 1234)"
"0","  att <- average_treatment_effect(c.forest, target.sample = ""treated"", method = ""AIPW"")"
"0","  att <- c(att, att[1] - 1.96 * att[2], att[1] + 1.96 * att[2])"
"0","  return(att)"
"0","}"
"0",""
"0","aipw.match <- function(data, Y, treat, covar) {"
"0","  # match on ps"
"0","  ps <- probability_forest(X = data[, covar], Y = as.factor(data[, treat]), seed = 1234)$predictions[,2]"
"0","  m.out <- Match(Y = data[, Y], Tr = data[, treat], X = ps,"
"0","                 estimand = ""ATT"", M = 1, replace = FALSE, ties = FALSE, BiasAdjust = FALSE)"
"0","  mb <- quiet(MatchBalance(treat ~ ps, data = data, match.out = m.out, nboots= 0))"
"0","  ks <- mb$AfterMatching[[1]]$ks$ks$statistic"
"0","  s <- data[c(m.out$index.treated, m.out$index.control), ]"
"0","  out <- aipw(s, Y, treat, covar)"
"0","  #return(out)"
"0","  return(c(out, ks))"
"0","}"
"0",""
"0","### This script checks for robustness by estimating original model"
"0","### using double/debiased machine learning using DoubleML package"
"0","dml <-function(data, Y = NULL, treat = NULL, covar = NULL, clust_var = NULL, ml_l = lrn(""regr.lm""), ml_m = lrn(""regr.lm"")){"
"0",""
"0","  if(is.null(covar)){"
"0","    stop(""No controls in specification."")"
"0","  }"
"0",""
"0","  #require(DoubleML)"
"0","  #require(mlr3learners)"
"0","  #require(fixest)"
"0","  #require(ggplot2)"
"0",""
"0","  if(is.null(clust_var) == TRUE){"
"0",""
"0","    dat = data[,c(Y,treat,covar)]"
"0","    dat = na.omit(dat)"
"0",""
"0","    dml_dat = DoubleMLData$new(dat,"
"0","                               y_col = Y,"
"0","                               d_cols = treat,"
"0","                               use_other_treat_as_covariate = FALSE,"
"0","                               x_cols = covar)"
"0",""
"0","  }else{"
"0",""
"0","    dat = data[,c(Y, treat, covar, clust_var)]"
"0","    dat[,clust_var] = as.numeric(factor(dat[,clust_var]))"
"0","    dat = dat[is.na(dat[,Y]) == FALSE,]"
"0","    dat = dat[is.na(dat[,D]) == FALSE,]"
"0","    features = data.frame(model.matrix(formula(paste(c('~ 1',treat,covar), collapse=""+"")), dat))"
"0","    dat = cbind(dat[,c(Y,clust_var)],features)"
"0",""
"0","    dml_dat = DoubleMLClusterData$new(dat,"
"0","                                      y_col = Y,"
"0","                                      d_cols = treat,"
"0","                                      cluster_cols = clust_var,"
"0","                                      use_other_treat_as_covariate = FALSE,"
"0","                                      x_cols = covar)"
"0","  }"
"0",""
"0","  # Set active treatment treatment"
"0","  dml_dat$set_data_model(treat)"
"0",""
"0","  # Estimate with DML"
"0","  set.seed(pi)"
"0","  dml_mod = DoubleMLPLR$new(dml_dat, ml_l=ml_l, ml_m=ml_m)"
"0","  quiet(dml_mod$fit())"
"0","  out = c(dml_mod$coef[treat], dml_mod$se[treat], dml_mod$confint()[treat,])"
"0",""
"0","  return(out)"
"0",""
"0","}"
"0",""
"0","# execute all estimators"
"0","## estimate all"
"0","estimate_all <- function(data, Y, treat, covar, "
"0","    methods = c(""diff"", ""reg"", ""om.reg"", ""om.grf"","
"0","      ""matching"", ""psm"", ""ipw"", ""cbps"", ""ebal"", "
"0","      ""dml"", ""aipw_grf"")) {"
"0","  "
"0","  results <- as.data.frame(matrix(NA, length(methods), 4))"
"0","  rownames(results) <- methods"
"0","  colnames(results) <- c(""Estimate"", ""SE"", ""CI_lower"", ""CI_upper"")"
"0","  m <- 1"
"0","  if (""diff"" %in% methods) {"
"0","    results[m, ] <- diff(data, Y, treat) "
"0","    m <- m + 1"
"0","  }"
"0","  if (""reg"" %in% methods) {"
"0","    results[m, ] <- reg(data, Y, treat, covar) "
"0","    m <- m + 1"
"0","  }"
"0","  if (""om.reg"" %in% methods) {"
"0","    results[m, ] <- om.reg(data, Y, treat, covar) "
"0","    m <- m + 1"
"0","  }"
"0","  if (""om.grf"" %in% methods) {"
"0","    results[m, ] <- om.grf(data, Y, treat, covar) "
"0","    m <- m + 1"
"0","  } "
"0","  if (""matching"" %in% methods) {"
"0","    results[m, ] <- matching(data, Y, treat, covar) "
"0","    m <- m + 1"
"0","  }"
"0","  if (""psm"" %in% methods) {"
"0","    results[m, ] <- psm(data, Y, treat, covar) "
"0","    m <- m + 1"
"0","  }  "
"0","  if (""ipw"" %in% methods) {"
"0","    results[m, ] <- ipw(data, Y, treat, covar) "
"0","    m <- m + 1"
"0","  }"
"0","  if (""cbps"" %in% methods) {"
"0","    results[m, ] <- cbps(data, Y, treat, covar) "
"0","    m <- m + 1"
"0","  }"
"0","  if (""ebal"" %in% methods) {"
"0","    results[m, ] <- quiet(ebal(data, Y, treat, covar))"
"0","    m <- m + 1"
"0","  }"
"0","  # if (""hbal"" %in% methods) {"
"0","  #   results[m, ] <- quiet(hbal(data, Y, treat, covar))"
"0","  #   m <- m + 1"
"0","  # }"
"0","  if (""dml"" %in% methods) {"
"0","    results[m, ] <-dml(data, Y, treat, covar) "
"0","    m <- m + 1"
"0","  }"
"0","  if (""aipw_grf"" %in% methods) {"
"0","    results[m, ] <- aipw(data, Y, treat, covar) "
"0","    m <- m + 1"
"0","  }"
"0","  return(results)"
"0","}"
